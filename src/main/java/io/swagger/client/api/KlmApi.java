/*
 * Swagger Petstore
 * Api documentation for simple travel api mock
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AirportsResponse;
import io.swagger.client.model.Fare;
import io.swagger.client.model.Location;
import org.springframework.stereotype.Component;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Component
public class KlmApi {
    private ApiClient apiClient;

    public KlmApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KlmApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAirports
     * @param size the size of the result (optional)
     * @param page the page to be selected in the paged response (optional)
     * @param lang the language, supported ones are nl and en (optional)
     * @param term A search term that searches through code, name and description. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAirportsCall(Integer size, Integer page, String lang, String term, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/airports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));
        if (term != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("term", term));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAirportsValidateBeforeCall(Integer size, Integer page, String lang, String term, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getAirportsCall(size, page, lang, term, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List All aiports
     * 
     * @param size the size of the result (optional)
     * @param page the page to be selected in the paged response (optional)
     * @param lang the language, supported ones are nl and en (optional)
     * @param term A search term that searches through code, name and description. (optional)
     * @return AirportsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AirportsResponse getAirports(Integer size, Integer page, String lang, String term) throws ApiException {
        ApiResponse<AirportsResponse> resp = getAirportsWithHttpInfo(size, page, lang, term);
        return resp.getData();
    }

    /**
     * List All aiports
     * 
     * @param size the size of the result (optional)
     * @param page the page to be selected in the paged response (optional)
     * @param lang the language, supported ones are nl and en (optional)
     * @param term A search term that searches through code, name and description. (optional)
     * @return ApiResponse&lt;AirportsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AirportsResponse> getAirportsWithHttpInfo(Integer size, Integer page, String lang, String term) throws ApiException {
        com.squareup.okhttp.Call call = getAirportsValidateBeforeCall(size, page, lang, term, null, null);
        Type localVarReturnType = new TypeToken<AirportsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List All aiports (asynchronously)
     * 
     * @param size the size of the result (optional)
     * @param page the page to be selected in the paged response (optional)
     * @param lang the language, supported ones are nl and en (optional)
     * @param term A search term that searches through code, name and description. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAirportsAsync(Integer size, Integer page, String lang, String term, final ApiCallback<AirportsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAirportsValidateBeforeCall(size, page, lang, term, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AirportsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAirportsByCode
     * @param code airport code (required)
     * @param lang the language, supported ones are nl and en (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAirportsByCodeCall(String code, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/airports/{code}"
            .replaceAll("\\{" + "code" + "\\}", apiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAirportsByCodeValidateBeforeCall(String code, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getAirportsByCode(Async)");
        }
        

        com.squareup.okhttp.Call call = getAirportsByCodeCall(code, lang, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Airport by code
     * 
     * @param code airport code (required)
     * @param lang the language, supported ones are nl and en (optional)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Location getAirportsByCode(String code, String lang) throws ApiException {
        ApiResponse<Location> resp = getAirportsByCodeWithHttpInfo(code, lang);
        return resp.getData();
    }

    /**
     * Get Airport by code
     * 
     * @param code airport code (required)
     * @param lang the language, supported ones are nl and en (optional)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Location> getAirportsByCodeWithHttpInfo(String code, String lang) throws ApiException {
        com.squareup.okhttp.Call call = getAirportsByCodeValidateBeforeCall(code, lang, null, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Airport by code (asynchronously)
     * 
     * @param code airport code (required)
     * @param lang the language, supported ones are nl and en (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAirportsByCodeAsync(String code, String lang, final ApiCallback<Location> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAirportsByCodeValidateBeforeCall(code, lang, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFare
     * @param originCode airport code (required)
     * @param destinationCode airport code (required)
     * @param currency the requested resulting currency, supported ones are EUR and USD (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFareCall(String originCode, String destinationCode, String currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fares/{origin_code}/{destination_code}"
            .replaceAll("\\{" + "origin_code" + "\\}", apiClient.escapeString(originCode.toString()))
            .replaceAll("\\{" + "destination_code" + "\\}", apiClient.escapeString(destinationCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency", currency));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFareValidateBeforeCall(String originCode, String destinationCode, String currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'originCode' is set
        if (originCode == null) {
            throw new ApiException("Missing the required parameter 'originCode' when calling getFare(Async)");
        }
        
        // verify the required parameter 'destinationCode' is set
        if (destinationCode == null) {
            throw new ApiException("Missing the required parameter 'destinationCode' when calling getFare(Async)");
        }
        

        com.squareup.okhttp.Call call = getFareCall(originCode, destinationCode, currency, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get calculated fare
     * 
     * @param originCode airport code (required)
     * @param destinationCode airport code (required)
     * @param currency the requested resulting currency, supported ones are EUR and USD (optional)
     * @return Fare
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Fare getFare(String originCode, String destinationCode, String currency) throws ApiException {
        ApiResponse<Fare> resp = getFareWithHttpInfo(originCode, destinationCode, currency);
        return resp.getData();
    }

    /**
     * Get calculated fare
     * 
     * @param originCode airport code (required)
     * @param destinationCode airport code (required)
     * @param currency the requested resulting currency, supported ones are EUR and USD (optional)
     * @return ApiResponse&lt;Fare&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Fare> getFareWithHttpInfo(String originCode, String destinationCode, String currency) throws ApiException {
        com.squareup.okhttp.Call call = getFareValidateBeforeCall(originCode, destinationCode, currency, null, null);
        Type localVarReturnType = new TypeToken<Fare>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get calculated fare (asynchronously)
     * 
     * @param originCode airport code (required)
     * @param destinationCode airport code (required)
     * @param currency the requested resulting currency, supported ones are EUR and USD (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFareAsync(String originCode, String destinationCode, String currency, final ApiCallback<Fare> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFareValidateBeforeCall(originCode, destinationCode, currency, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Fare>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
